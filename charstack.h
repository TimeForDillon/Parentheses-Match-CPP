/*******************************************************************************
* AUTHOR       : Dillon Welsh
* ASSIGNMENT 4 : Stacks
* CLASS        : CS 8
* SECTION      : 33776
* DUE DATE     : 04/03/2021
*******************************************************************************/

#ifndef CHARSTACK_H
#define CHARSTACK_H

#include <iostream>

using namespace std;

/*******************************************************************************
* STRUCT CharNode
*_______________________________________________________________________________
* This struct is a node struct with a piece of data that stores chars and a
* piece of data that points to the next char.
*_______________________________________________________________________________
* PRE-CONDITIONS
* None
*
* POST-CONDITIONS
* None
*******************************************************************************/
struct CharNode
{
    char data;
    CharNode *next;
    CharNode( char data ) : data(data), next(0) {}
};

class CharStack
{
public:

    /******************************
     * CONSTRUCTORS & DESTRUCTORS *
     ******************************/
    CharStack();
    ~CharStack();

    /************
     * MUTATORS *
     ************/
    void push(char value);
    void pop();

    /*************
     * ACCESSORS *
     *************/
    char top() const;
    bool isEmpty();
    void display() const;

private:
    CharNode *head;
    CharNode *tail;
};

#endif // CHARSTACK_H

/*******************************************************************************
* CONSTRUCTOR CharStack
*_______________________________________________________________________________
* This constructor constructs an empty char stack.
*******************************************************************************/

/*******************************************************************************
* DESTRUCTOR CharStack
*_______________________________________________________________________________
* This destructs the CharStack object and deallocated memory.
*******************************************************************************/

/*******************************************************************************
* MUTATOR push(char value)
*_______________________________________________________________________________
* This method adds a new CharNode with the given char value and places it at the
* head
*******************************************************************************/

/*******************************************************************************
* MUTATOR pop()
*_______________________________________________________________________________
* This method removes the front node from the stack
*******************************************************************************/

/*******************************************************************************
* ACCESSOR top() const
*_______________________________________________________________________________
* This method returns the char value at the top of the stack
*******************************************************************************/

/*******************************************************************************
* ACCESSOR isEmpty()
*_______________________________________________________________________________
* This method returns true if the stack is empty
*******************************************************************************/

/*******************************************************************************
* ACCESSOR display() const
*_______________________________________________________________________________
* This method displays the stack
*******************************************************************************/


